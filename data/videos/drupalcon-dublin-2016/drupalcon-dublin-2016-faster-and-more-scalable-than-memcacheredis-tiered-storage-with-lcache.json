{
    "abstract": "https://events.drupal.org/dublin2016/sessions/faster-and-more-scalable-memcacheredis-tiered-caching-lcache",
    "description": "Scalable caching in Drupal is broken. Once cache access saturates a network link, the main options are Memcache sharding (which\u00a0has broken coherency during and after\u00a0network splits) and Redis clustering (immature in multi-master and as complex as MySQL replication in master/replica modes).\n\nWe can do better. We can have better performance, scale, and operational simplicity. We just need to take a lesson from multicore processor architectures and their use of L1/L2 caches. Drupal doesn't even\u00a0need full-scale coherency management; it just needs the cache writes\u00a0on an earlier request to be guaranteed readable on a\u00a0later request.\n\nInspired by how processors handle core-local caches\u00a0and the design of Pantheon's Valhalla file system,\u00a0I've written a library and module called LCache with the following properties:\n\nUses the database for\u00a0canonical cache storage and coherency management. This is the L2.\nOpportunistically uses APCu (which is local to each\u00a0PHP-FPM pool and absent for CLI) as an L1.\nBefore Drupal bootstraps, it freshens APCu (if present) using L2's causality and sequencing\u00a0information.\nFalls back to just using the database cache if APCu isn't present or functional.\nThere is nothing extra to deploy or configure, just enabling the\u00a0APCu extension for PHP.\nSupport for tag-based invalidation.\nInitial results show 20% less page-generation time than with datacenter-local (but not host-local)\u00a0Redis access. This is primarily because there's only one round-trip to the cache for each request, and that request only returns data for cache updates.\n\nIn this presentation, I will cover:\n\nThe coherency protocol, including some discussion of vector clocks\nBenchmarks\nThe unit\u00a0testing model\u00a0for the\u00a0cache coherency implementation\nHow fallback to pure database caching works\nWhy core should adopt this as the default cache implementation in, say, Drupal 8.3\u00a0or 8.4.",
    "favorite": "0",
    "length": "01:09:53",
    "likes": "3",
    "recorded": "2016-09-26",
    "speakers": ["david-strauss"],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/rezn59U9CAk/hqdefault.jpg",
    "title": "Faster and More Scalable than Memcache/Redis: Tiered Storage with LCache",
    "videos": [
        {
            "code": "rezn59U9CAk",
            "type": "youtube"
        }
    ],
    "views": "305"
}