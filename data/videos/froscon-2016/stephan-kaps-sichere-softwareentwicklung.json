{
    "description": "Continuous Delivery (CD) ist in aller Munde. Zu Recht, denn neben der M\u00f6glichkeit, sehr fr\u00fchzeitig Feedback zu neuen Entwicklungen zu erhalten, erlaubt CD durch Automatisierung von Build-, Deploy- und Testprozessen schnell, zuverl\u00e4ssig und wiederholbar Software auszuliefern, qualitativ hochwertig, mit niedrigem manuellen Aufwand und geringem Risiko.\n\nDoch wollen wir unsere Software kontinuierlich ausliefern, m\u00fcssen wir auch kontinuierlich Sicherheits-Tests durchf\u00fchren!\n\nContinuous Security Testing bedeutet, statische und dynamische Analysen bereits w\u00e4hrend der Entwicklung durchzuf\u00fchren, um fr\u00fchzeitig und regelm\u00e4\u00dfig Sicherheitsma\u00dfnahmen umzusetzen, bevor manuelle Pr\u00fcfungen wie Penetrationstests zum Einsatz kommen. Um eine Anwendung bereits w\u00e4hrend der Entwicklung auf das Vorhandensein sicherheitskritischer Schwachstellen hin \u00fcberpr\u00fcfen zu k\u00f6nnen, ist eine Integration in den Entwicklungsprozess und somit eine kontinuierliche und am besten automatisierte Pr\u00fcfung notwendig.\n\nDer Vortrag stellt die praktischen Erfahrungen aus einem Projekt vor, bei dem Sicherheits-Richtlinien (Secure Coding Guide) f\u00fcr die eigene Entwicklung von Java-Webanwendungen aufgestellt und Sicherheitstests in den Softwareentwicklungsprozess integriert wurden. Dabei wird auf die organisatorischen, inhaltlichen und technischen \u00dcberlegungen eingegangen.\n\nStephan Kaps",
    "favorite": "0",
    "length": "54:20",
    "likes": "0",
    "recorded": "2016-08-20",
    "speakers": ["stephan-kaps"],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/7xwJMfA3mYQ/hqdefault.jpg",
    "title": "Sichere Softwareentwicklung",
    "videos": [
        {
            "code": "7xwJMfA3mYQ",
            "type": "youtube"
        }
    ],
    "views": "62"
}