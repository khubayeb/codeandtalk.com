{
    "description": "La g\u00e9n\u00e9ration de code dynamique sur la JVM est une technique aujourd'hui bien connue. Il suffit de fabriquer du Java ByteCode, et de charger les classes correspondantes \u00e0 l'ex\u00e9cution.\n\nCependant j'ai \u00e9t\u00e9 r\u00e9cemment confront\u00e9 \u00e0 un challenge int\u00e9ressant: serait-il possible g\u00e9n\u00e9rer directement du code natif dynamiquement ? C'est \u00e0 dire sans passer par du Java ByteCode et l'\u00e9tape de compilation JIT de Hotspot, et ainsi avoir totalement la main sur le code natif d'une fonction ?\n\nC'est effectivement possible. Dans cette pr\u00e9sentation j'exposerai les diff\u00e9rentes \u00e9tapes qui permettent de r\u00e9aliser la g\u00e9n\u00e9ration de code natif dynamiquement sur la JVM:\n\nD\u00e9crire une API minimale permettant de manipuler un langage assembleur directement dans le langage h\u00f4te.\nEcrire un mini-assembleur permettant de le traduire en code natif au runtime.\nCharger ce code natif en m\u00e9moire, et le rendre executable.\nEnfin, le rendre interop\u00e9rable avec le langage h\u00f4te et lui assignant un type fonction.\nIci j'utiliserai Scala comme langage h\u00f4te, mais les techniques pr\u00e9sent\u00e9es peuvent \u00eatre facilement appliqu\u00e9es en Java ou un autre langage de la JVM.",
    "favorite": "0",
    "length": "44:24",
    "likes": "5",
    "recorded": "2016-04-20",
    "speakers": ["guillaume-bort"],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/3wV9Rob1Y_g/hqdefault.jpg",
    "title": "Un assembleur dynamique sur la JVM ?",
    "videos": [
        {
            "code": "3wV9Rob1Y_g",
            "type": "youtube"
        }
    ],
    "views": "282"
}