{
    "description": "This talk covers following SOLID design principles in Ruby with live code examples.\n\nSingle responsibility principle: an object should have only a single responsibility.\nOpen/closed principle: an object should be open for extension, but closed for modification.\nLiskov substitution principle: objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program\nInterface segregation principle: many client specific interfaces are better than one general purpose interface.\nDependency inversion principle: depend upon abstractions, do not depend upon concretions Talk will have live code example which will be evolved step by step to use all SOLID principles.\nThis talk will also answer the question why just following these principles will make your code more clean readable, extensible and better. Also make you better programmer.\n\nTalk would take around 30-40 minutes. Talk would be definitely useful for both noob and advanced Ruby programmers.",
    "favorite": "0",
    "length": "28:08",
    "likes": "6",
    "recorded": "2014-03-22",
    "speakers": ["anil-wadghule"],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/wp-VftYr-jQ/hqdefault.jpg",
    "title": "SOLID Design Principles in Ruby",
    "videos": [
        {
            "code": "wp-VftYr-jQ",
            "type": "youtube"
        }
    ],
    "views": "478"
}