{"description": "Imagine you're tackling one of these evasive performance issues in the field, and your go-to monitoring checklist doesn't seem to cut it. There are plenty of suspects, but they are moving around rapidly and you need more logs, more data, more in-depth information to make a diagnosis. Maybe you've heard about DTrace, or even used it, and are yearning for a similar toolkit, which can plug dynamic tracing into a system that wasn't prepared or instrumented in any way.\nHopefully, you won't have to yearn for a lot longer. eBPF (extended Berkeley Packet Filters) is a kernel technology that enables a plethora of diagnostic scenarios by introducing dynamic, safe, low-overhead, efficient programs that run in the context of your live kernel. Sure, BPF programs can attach to sockets; but more interestingly, they can attach to kprobes and uprobes, static kernel tracepoints, and even user-mode static probes. And modern BPF programs have access to a wide set of instructions and data structures, which means you can collect valuable information and analyze it on-the-fly, without spilling it to huge files and reading them from user space.\nIn this talk, we will introduce BCC, the BPF Compiler Collection, which is an open set of tools and libraries for dynamic tracing on Linux. Some tools are easy and ready to use, such as execsnoop, fileslower, and memleak. Other tools such as trace and argdist require more sophistication and can be used as a Swiss Army knife for a variety of scenarios. We will spend most of the time demonstrating the power of modern dynamic tracing -- from memory leaks to static probes in Ruby, Node, and Java programs, from slow file I/O to monitoring network traffic. Finally, we will discuss building our own tools using the Python and Lua bindings to BCC, and its LLVM backend.", "event": {"name": "Reversim Summit 2016", "nickname": "reversim-2016", "twitter": "reversim", "url": "http://summit2016.reversim.com/"}, "favorite": "0", "file_date": "2016-12-30", "filename": "the-next-linux-superpower-ebpf-primer-sasha-goldshtein", "language": "Hebrew", "length": "38:22", "likes": "1", "recorded": "2016-09-19", "short_description": "Imagine you're tackling one of these evasive performance issues in the field, and your go-to monitoring checklist doesn't seem t", "speaker_twitters": " @goldshtn", "speakers": {"sasha-goldshtein": {"episodes": [], "hosting": [], "info": {"country": "Jerusalem, Israel", "github": "goldshtn", "home": "http://blogs.microsoft.co.il/sasha/", "name": "Sasha Goldshtein", "twitter": "goldshtn"}, "videos": [{"event": {"name": "Reversim Summit 2016", "nickname": "reversim-2016", "twitter": "reversim", "url": "http://summit2016.reversim.com/"}, "filename": "the-next-linux-superpower-ebpf-primer-sasha-goldshtein", "recorded": "2016-09-19", "thumbnail_url": "https://i.ytimg.com/vi/2_ueSCacllY/hqdefault.jpg", "title": "The Next Linux Superpower: eBPF Primer (Hebrew)"}]}}, "tags": [], "thumbnail_url": "https://i.ytimg.com/vi/2_ueSCacllY/hqdefault.jpg", "title": "The Next Linux Superpower: eBPF Primer (Hebrew)", "tweet_video": "The%20Next%20Linux%20Superpower%3A%20eBPF%20Primer%20%28Hebrew%29%20https%3A//codeandtalk.com/v/reversim-2016/the-next-linux-superpower-ebpf-primer-sasha-goldshtein%20presented%20%40reversim%20by%20%40goldshtn", "videos": [{"code": "2_ueSCacllY", "type": "youtube"}], "views": "132"}