{"blasters": ["architecture"], "description": "Actors, or the <a href=\"https://en.wikipedia.org/wiki/Actor_model\">Actor model</a>\nis to replace the <b>concurrency</b> that was done via <a href=\"https://en.wikipedia.org/wiki/Thread_(computing)\">multithreading</a>\nwhich has shared memory, but also has problems such as synchronizations, race conditions, etc.\n<p>\nActors are communicating via asynchronous messages. Never share state. An actor is single threaded.\n<p>\nEach thread can run multiple actors concurrently, but a single actor is in a single thread. There are two additional advantages of this model:\nCPU utilization within a single computer and the ability to distribute the workload to several computers.\n<p>\nIn the cloud things get even more complicated regarding distributed computing.\n<h3>Virtual Actors</h3>\n<ul>\n  <li>Microsoft Research: <a href=\"https://dotnet.github.io/orleans/\">Project Orleans</a></li>\n  <li>Port to Java: <a href=\"https://github.com/orbit\">Orbit (by EA)</a></li>\n</ul>\n\nA Virtual Actor has two more traits: it <b>always exists</b> and <b>never fails</b> so need to handle the life-cycle of virtual actors.\nTakes away a lot of the complexity of the existing actor systems.\n\n<p>\nNew Actor types:\n<ul>\n   <li><b>Worker</b> - an actor that does not hold state. An auto-scaling processing-unit.</li>\n   <li><b>Single Activation</b> Guaranteed to have a single active instance in the cluster. (A stateful application middle-tier.)</li>\n</ul>\n<p>\nActors are actually <b>Nanonservices</b> very similar to <a href=\"https://en.wikipedia.org/wiki/Microservices\">Microservices</a>\n<p>\n<ul>\n  <li><q>Microservices is an organizational decision, not so much a technical decision.</q></li>\n  <li><q>Base the communication on Interfaces instead of Messages.</q></li>\n</ul>\n\nThe speaker is VP Architecture at <a href=\"http://www.gigya.com/\">Gigya</a>\n", "event": {"name": "DevCon Tel Aviv 2016.03", "nickname": "devcon-telaviv-2016-03", "twitter": "fogelmania", "url": "https://devcontlv-march2016.events.co.il/home"}, "favorite": "0", "featured": "2016-12-10", "file_date": "2016-12-03", "filename": "actors-and-microservices-can-two-walk-together-rotm-hermon-at-devcontlv-march", "length": "22:46", "likes": "1", "recorded": "2016-03-22", "short_description": "Actors, or the Actor model is to replace the concurrency that was done via multithreading which has shared memory, but also has ", "speaker_twitters": " @margolis20", "speakers": {"rotem-hermon": {"episodes": [], "hosting": [], "info": {"country": "Israel", "github": "rore", "home": "http://rore.im/", "name": "Rotem Hermon", "twitter": "margolis20"}, "videos": [{"event": {"name": "DevCon Tel Aviv 2016.03", "nickname": "devcon-telaviv-2016-03", "twitter": "fogelmania", "url": "https://devcontlv-march2016.events.co.il/home"}, "filename": "actors-and-microservices-can-two-walk-together-rotm-hermon-at-devcontlv-march", "recorded": "2016-03-22", "thumbnail_url": "https://i.ytimg.com/vi/1c6jCdQ3l4U/hqdefault.jpg", "title": "Actors and microservices - Can Two Walk Together?"}]}}, "tags": [{"link": "actors", "text": "actors"}, {"link": "microservices", "text": "microservices"}], "thumbnail_url": "https://i.ytimg.com/vi/1c6jCdQ3l4U/hqdefault.jpg", "title": "Actors and microservices - Can Two Walk Together?", "tweet_video": "Actors%20and%20microservices%20-%20Can%20Two%20Walk%20Together%3F%20https%3A//codeandtalk.com/v/devcon-telaviv-2016-03/actors-and-microservices-can-two-walk-together-rotm-hermon-at-devcontlv-march%20presented%20%40fogelmania%20by%20%40margolis20%20%23actors%20%23microservices", "videos": [{"code": "1c6jCdQ3l4U", "type": "youtube"}], "views": "149"}